!function(){"use strict";class e{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}resetValidation(){this._toggleButtonState(),this._inputEls.forEach((e=>{this._hideInputError(e)}))}_toggleButtonState(){return this._hasInvalidInput(this._inputEls)?this.disableButton():this.enableButton()}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_setEventListeners(){this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this.disableButton(),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class t{constructor(e,t,s){this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleCardClick=s}_setEventListeners(){this._element.querySelector(".card__like-button").addEventListener("click",(()=>this._handleLikeButton())),this._element.querySelector(".card__delete-button").addEventListener("click",(()=>this._handleDeleteCard())),this._element.querySelector(".card__image").addEventListener("click",(()=>this._handleCardClick({link:this._link,name:this._name})))}_handleLikeButton(){this._element.querySelector(".card__like-button").classList.toggle("card__like-button_active")}_handleDeleteCard(){this._element.remove(),this._element=null}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){this._element=this._getTemplate();const e=this._element.querySelector(".card__image"),t=this._element.querySelector(".card__title");return e.src=this._link,e.alt=this._name,t.textContent=this._name,this._setEventListeners(),this._element}}const s=document.querySelector(".profile__edit-button"),n=document.querySelector("#add-button"),i={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};class o{constructor(e){let{modalSelector:t}=e;this._modal=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}openModal(){this._modal.classList.add("modal__opened"),document.addEventListener("keyup",this._handleEscClose)}closeModal(){this._modal.classList.remove("modal__opened"),document.removeEventListener("keyup",this._handleEscClose)}_handleEscClose(e){e.preventDefault(),"Escape"===e.key&&this.closeModal()}setEventListeners(){this._modal.addEventListener("mousedown",(e=>{e.target.closest(".modal__content")&&!e.target.classList.contains("modal__close")||this.closeModal()}))}}class r extends o{constructor(e){let{modalSelector:t,handleFormSubmit:s,resetOnClose:n}=e;super({modalSelector:t}),this._resetOnClose=n,this._modalForm=this._modal.querySelector(".modal__form"),this._inputList=this._modalForm.querySelectorAll(".modal__input"),this._handleFormSubmit=s}_getInputValues(){const e={};return this._inputList.forEach((t=>e[t.name]=t.value)),e}openModal(){this._resetOnClose&&this._modalForm.reset(),super.openModal()}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.closeModal(),this._modalForm.reset()})),super.setEventListeners()}}const l=new class{constructor(e,t){let{items:s,renderer:n}=e;this._initialArray=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._initialArray.reverse().forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:e=>{l.addItem(a(e))}},".cards__list");function a(e){return new t(e,"#card-template",(e=>{u.openModal(e)})).getView()}l.renderItems(),new e(i,document.querySelector("#edit-profile-form")).enableValidation();const d=new e(i,document.querySelector("#add-card-form"));d.enableValidation();const c=new r({modalSelector:"#modal-edit",handleFormSubmit:e=>{m.setUserInfo(e)}});c.setEventListeners();const _=new r({modalSelector:"#modal-add",handleFormSubmit:e=>{l.addItem(a(e))},resetOnClose:!0});_.setEventListeners();const u=new class extends o{openModal(e){let{name:t,link:s}=e;this._modal.querySelector(".modal__preview-caption").textContent=t,this._modal.querySelector(".modal__preview-caption").alt=t,this._modal.querySelector(".modal__preview-image").src=s,super.openModal()}}({modalSelector:"#modal-image"});u.setEventListeners();const m=new class{constructor(e){let{userNameSelector:t,userTitleSelector:s}=e;this._userName=document.querySelector(t),this._userTitle=document.querySelector(s)}getUserInfo(){return{userName:this._userName.textContent,userTitle:this._userTitle.textContent}}setUserInfo(e){let{name:t,description:s}=e;this._userName.textContent=t,this._userTitle.textContent=s}}({userNameSelector:".profile__title",userTitleSelector:".profile__description"});s.addEventListener("click",(()=>{const{userName:e,userTitle:t}=m.getUserInfo();document.querySelector(".modal__input_type_name").value=e,document.querySelector(".modal__input_type_description").value=t,d.resetValidation(),c.openModal()})),n.addEventListener("click",(()=>{d.resetValidation(),_.openModal()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,